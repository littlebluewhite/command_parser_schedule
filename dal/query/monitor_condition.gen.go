// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"command_parser_schedule/dal/model"
)

func newMonitorCondition(db *gorm.DB, opts ...gen.DOOption) monitorCondition {
	_monitorCondition := monitorCondition{}

	_monitorCondition.monitorConditionDo.UseDB(db, opts...)
	_monitorCondition.monitorConditionDo.UseModel(&model.MonitorCondition{})

	tableName := _monitorCondition.monitorConditionDo.TableName()
	_monitorCondition.ALL = field.NewAsterisk(tableName)
	_monitorCondition.ID = field.NewInt32(tableName, "id")
	_monitorCondition.MonitorID = field.NewInt32(tableName, "monitor_id")
	_monitorCondition.ConditionID = field.NewInt32(tableName, "condition_id")

	_monitorCondition.fillFieldMap()

	return _monitorCondition
}

type monitorCondition struct {
	monitorConditionDo monitorConditionDo

	ALL         field.Asterisk
	ID          field.Int32
	MonitorID   field.Int32
	ConditionID field.Int32

	fieldMap map[string]field.Expr
}

func (m monitorCondition) Table(newTableName string) *monitorCondition {
	m.monitorConditionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorCondition) As(alias string) *monitorCondition {
	m.monitorConditionDo.DO = *(m.monitorConditionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorCondition) updateTableName(table string) *monitorCondition {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.MonitorID = field.NewInt32(table, "monitor_id")
	m.ConditionID = field.NewInt32(table, "condition_id")

	m.fillFieldMap()

	return m
}

func (m *monitorCondition) WithContext(ctx context.Context) *monitorConditionDo {
	return m.monitorConditionDo.WithContext(ctx)
}

func (m monitorCondition) TableName() string { return m.monitorConditionDo.TableName() }

func (m monitorCondition) Alias() string { return m.monitorConditionDo.Alias() }

func (m *monitorCondition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorCondition) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["id"] = m.ID
	m.fieldMap["monitor_id"] = m.MonitorID
	m.fieldMap["condition_id"] = m.ConditionID
}

func (m monitorCondition) clone(db *gorm.DB) monitorCondition {
	m.monitorConditionDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorCondition) replaceDB(db *gorm.DB) monitorCondition {
	m.monitorConditionDo.ReplaceDB(db)
	return m
}

type monitorConditionDo struct{ gen.DO }

func (m monitorConditionDo) Debug() *monitorConditionDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorConditionDo) WithContext(ctx context.Context) *monitorConditionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorConditionDo) ReadDB() *monitorConditionDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorConditionDo) WriteDB() *monitorConditionDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorConditionDo) Session(config *gorm.Session) *monitorConditionDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorConditionDo) Clauses(conds ...clause.Expression) *monitorConditionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorConditionDo) Returning(value interface{}, columns ...string) *monitorConditionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorConditionDo) Not(conds ...gen.Condition) *monitorConditionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorConditionDo) Or(conds ...gen.Condition) *monitorConditionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorConditionDo) Select(conds ...field.Expr) *monitorConditionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorConditionDo) Where(conds ...gen.Condition) *monitorConditionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorConditionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *monitorConditionDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorConditionDo) Order(conds ...field.Expr) *monitorConditionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorConditionDo) Distinct(cols ...field.Expr) *monitorConditionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorConditionDo) Omit(cols ...field.Expr) *monitorConditionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorConditionDo) Join(table schema.Tabler, on ...field.Expr) *monitorConditionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorConditionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *monitorConditionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorConditionDo) RightJoin(table schema.Tabler, on ...field.Expr) *monitorConditionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorConditionDo) Group(cols ...field.Expr) *monitorConditionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorConditionDo) Having(conds ...gen.Condition) *monitorConditionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorConditionDo) Limit(limit int) *monitorConditionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorConditionDo) Offset(offset int) *monitorConditionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorConditionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *monitorConditionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorConditionDo) Unscoped() *monitorConditionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorConditionDo) Create(values ...*model.MonitorCondition) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorConditionDo) CreateInBatches(values []*model.MonitorCondition, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorConditionDo) Save(values ...*model.MonitorCondition) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorConditionDo) First() (*model.MonitorCondition, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorCondition), nil
	}
}

func (m monitorConditionDo) Take() (*model.MonitorCondition, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorCondition), nil
	}
}

func (m monitorConditionDo) Last() (*model.MonitorCondition, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorCondition), nil
	}
}

func (m monitorConditionDo) Find() ([]*model.MonitorCondition, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorCondition), err
}

func (m monitorConditionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorCondition, err error) {
	buf := make([]*model.MonitorCondition, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorConditionDo) FindInBatches(result *[]*model.MonitorCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorConditionDo) Attrs(attrs ...field.AssignExpr) *monitorConditionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorConditionDo) Assign(attrs ...field.AssignExpr) *monitorConditionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorConditionDo) Joins(fields ...field.RelationField) *monitorConditionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorConditionDo) Preload(fields ...field.RelationField) *monitorConditionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorConditionDo) FirstOrInit() (*model.MonitorCondition, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorCondition), nil
	}
}

func (m monitorConditionDo) FirstOrCreate() (*model.MonitorCondition, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorCondition), nil
	}
}

func (m monitorConditionDo) FindByPage(offset int, limit int) (result []*model.MonitorCondition, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorConditionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorConditionDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorConditionDo) Delete(models ...*model.MonitorCondition) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorConditionDo) withDO(do gen.Dao) *monitorConditionDo {
	m.DO = *do.(*gen.DO)
	return m
}
