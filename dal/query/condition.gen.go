// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"command_parser_schedule/dal/model"
)

func newCondition(db *gorm.DB, opts ...gen.DOOption) condition {
	_condition := condition{}

	_condition.conditionDo.UseDB(db, opts...)
	_condition.conditionDo.UseModel(&model.Condition{})

	tableName := _condition.conditionDo.TableName()
	_condition.ALL = field.NewAsterisk(tableName)
	_condition.ID = field.NewInt32(tableName, "id")
	_condition.CalculateType = field.NewString(tableName, "calculate_type")
	_condition.NextLogicType = field.NewString(tableName, "next_logic_type")
	_condition.Value = field.NewString(tableName, "value")
	_condition.SearchRule = field.NewString(tableName, "search_rule")
	_condition.NextConditionID = field.NewInt32(tableName, "next_condition_id")

	_condition.fillFieldMap()

	return _condition
}

type condition struct {
	conditionDo conditionDo

	ALL             field.Asterisk
	ID              field.Int32
	CalculateType   field.String
	NextLogicType   field.String
	Value           field.String
	SearchRule      field.String // ex: person.item.[]array.name
	NextConditionID field.Int32

	fieldMap map[string]field.Expr
}

func (c condition) Table(newTableName string) *condition {
	c.conditionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c condition) As(alias string) *condition {
	c.conditionDo.DO = *(c.conditionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *condition) updateTableName(table string) *condition {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.CalculateType = field.NewString(table, "calculate_type")
	c.NextLogicType = field.NewString(table, "next_logic_type")
	c.Value = field.NewString(table, "value")
	c.SearchRule = field.NewString(table, "search_rule")
	c.NextConditionID = field.NewInt32(table, "next_condition_id")

	c.fillFieldMap()

	return c
}

func (c *condition) WithContext(ctx context.Context) *conditionDo {
	return c.conditionDo.WithContext(ctx)
}

func (c condition) TableName() string { return c.conditionDo.TableName() }

func (c condition) Alias() string { return c.conditionDo.Alias() }

func (c *condition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *condition) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["calculate_type"] = c.CalculateType
	c.fieldMap["next_logic_type"] = c.NextLogicType
	c.fieldMap["value"] = c.Value
	c.fieldMap["search_rule"] = c.SearchRule
	c.fieldMap["next_condition_id"] = c.NextConditionID
}

func (c condition) clone(db *gorm.DB) condition {
	c.conditionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c condition) replaceDB(db *gorm.DB) condition {
	c.conditionDo.ReplaceDB(db)
	return c
}

type conditionDo struct{ gen.DO }

func (c conditionDo) Debug() *conditionDo {
	return c.withDO(c.DO.Debug())
}

func (c conditionDo) WithContext(ctx context.Context) *conditionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c conditionDo) ReadDB() *conditionDo {
	return c.Clauses(dbresolver.Read)
}

func (c conditionDo) WriteDB() *conditionDo {
	return c.Clauses(dbresolver.Write)
}

func (c conditionDo) Session(config *gorm.Session) *conditionDo {
	return c.withDO(c.DO.Session(config))
}

func (c conditionDo) Clauses(conds ...clause.Expression) *conditionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c conditionDo) Returning(value interface{}, columns ...string) *conditionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c conditionDo) Not(conds ...gen.Condition) *conditionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c conditionDo) Or(conds ...gen.Condition) *conditionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c conditionDo) Select(conds ...field.Expr) *conditionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c conditionDo) Where(conds ...gen.Condition) *conditionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c conditionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *conditionDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c conditionDo) Order(conds ...field.Expr) *conditionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c conditionDo) Distinct(cols ...field.Expr) *conditionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c conditionDo) Omit(cols ...field.Expr) *conditionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c conditionDo) Join(table schema.Tabler, on ...field.Expr) *conditionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c conditionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *conditionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c conditionDo) RightJoin(table schema.Tabler, on ...field.Expr) *conditionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c conditionDo) Group(cols ...field.Expr) *conditionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c conditionDo) Having(conds ...gen.Condition) *conditionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c conditionDo) Limit(limit int) *conditionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c conditionDo) Offset(offset int) *conditionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c conditionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *conditionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c conditionDo) Unscoped() *conditionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c conditionDo) Create(values ...*model.Condition) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c conditionDo) CreateInBatches(values []*model.Condition, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c conditionDo) Save(values ...*model.Condition) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c conditionDo) First() (*model.Condition, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Condition), nil
	}
}

func (c conditionDo) Take() (*model.Condition, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Condition), nil
	}
}

func (c conditionDo) Last() (*model.Condition, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Condition), nil
	}
}

func (c conditionDo) Find() ([]*model.Condition, error) {
	result, err := c.DO.Find()
	return result.([]*model.Condition), err
}

func (c conditionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Condition, err error) {
	buf := make([]*model.Condition, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c conditionDo) FindInBatches(result *[]*model.Condition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c conditionDo) Attrs(attrs ...field.AssignExpr) *conditionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c conditionDo) Assign(attrs ...field.AssignExpr) *conditionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c conditionDo) Joins(fields ...field.RelationField) *conditionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c conditionDo) Preload(fields ...field.RelationField) *conditionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c conditionDo) FirstOrInit() (*model.Condition, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Condition), nil
	}
}

func (c conditionDo) FirstOrCreate() (*model.Condition, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Condition), nil
	}
}

func (c conditionDo) FindByPage(offset int, limit int) (result []*model.Condition, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c conditionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c conditionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c conditionDo) Delete(models ...*model.Condition) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *conditionDo) withDO(do gen.Dao) *conditionDo {
	c.DO = *do.(*gen.DO)
	return c
}
